{
	"info": {
		"_postman_id": "1283b65d-9370-43ed-bf28-868d60d59d86",
		"name": "Lloyds API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45534366",
		"_collection_link": "https://andrewwood-4274975.postman.co/workspace/Andrew-Wood's-Workspace~0f50d74c-9234-4546-8473-d412f1e251aa/collection/45534366-1283b65d-9370-43ed-bf28-868d60d59d86?action=share&source=collection_link&creator=45534366"
	},
	"item": [
		{
			"name": "Leagues",
			"item": [
				{
					"name": "Get all leagues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each league object has id, name, country, and created_at\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) { // Only check if the array is not empty\r",
									"        const firstLeague = jsonData[0];\r",
									"        pm.expect(firstLeague).to.have.property('id');\r",
									"        pm.expect(firstLeague).to.have.property('name').and.to.be.a('string');\r",
									"        pm.expect(firstLeague).to.have.property('country').and.to.be.a('string');\r",
									"        pm.expect(firstLeague).to.have.property('created_at');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response array is not empty (assuming DB is seeded)\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.greaterThan(0, \"Expected some leagues to be returned as DB should be seeded\");\r",
									"});\r",
									"\r",
									"pm.test(\"Premier League (England) is present if seeded\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const premierLeague = jsonData.find(league => league.name === \"Premier League\" && league.country === \"England\");\r",
									"    if (jsonData.some(league => league.name === \"Premier League\" && league.country === \"England\")) {\r",
									"         pm.expect(premierLeague).to.not.be.undefined;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/leagues",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"leagues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get leagues filtered by country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Search filter is not case-sensitive\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) { // Only check if the array is not empty\r",
									"        const firstLeague = jsonData[0];\r",
									"        pm.expect(firstLeague.country).to.eql(\"England\");\r",
									"    } else {\r",
									"        console.warn(\"Warning: No leagues returned for England, check seed data.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"All leagues from country are returned\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2);\r",
									"    if (jsonData.length > 0) { \r",
									"        jsonData.forEach(function(league) {\r",
									"            pm.expect(league.country).to.eql(\"England\");\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/leagues?country=england",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"leagues"
							],
							"query": [
								{
									"key": "country",
									"value": "england"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get leagues filter by country not in database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an empty array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').and.to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/api/leagues?country=neverland",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"leagues"
							],
							"query": [
								{
									"key": "country",
									"value": "neverland"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get leagues filtered by country with extra params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Unrecognised parameter has no effect\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2);\r",
									"    if (jsonData.length > 0) { \r",
									"        jsonData.forEach(function(league) {\r",
									"            pm.expect(league.country).to.eql(\"England\");\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/leagues?country=england&other=something",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"leagues"
							],
							"query": [
								{
									"key": "country",
									"value": "england"
								},
								{
									"key": "other",
									"value": "something"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new league",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains the created league with correct data\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.name).to.eql(\"Serie B\"); \r",
									"    pm.expect(jsonData.country).to.eql(\"Italy\"); // Your controller title-cases\r",
									"    pm.expect(jsonData).to.have.property('created_at');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"serie B\",\r\n    \"country\": \"italy\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/leagues",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"leagues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a league that already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Conflict\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Duplicate leagues are not case sensitive\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('League with name \"serie A\" already exists in \"brazil\".');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"serie A\",\r\n    \"country\": \"brazil\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/leagues",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"leagues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new league without country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates name and country are required\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"League name and country are required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Serie A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/leagues",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"leagues"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new league without name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates name and country are required\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"League name and country are required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"country\": \"Brazil\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/leagues",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"leagues"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teams",
			"item": [
				{
					"name": "Get all teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each team object has id, name, league_name, league_country, and created_at\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) { // Only check if the array is not empty\r",
									"        const firstTeam = jsonData[0];\r",
									"        pm.expect(firstTeam).to.have.property('id');\r",
									"        pm.expect(firstTeam).to.have.property('team_name').and.to.be.a('string');\r",
									"        pm.expect(firstTeam).to.have.property('league_name').and.to.be.a('string');\r",
									"        pm.expect(firstTeam).to.have.property('league_country').and.to.be.a('string');\r",
									"        pm.expect(firstTeam).to.have.property('created_at');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response array is not empty (assuming DB is seeded)\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.greaterThan(0, \"Expected some leagues to be returned as DB should be seeded\");\r",
									"});\r",
									"\r",
									"pm.test(\"Liverpool is present if seeded\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const liverpool = jsonData.find(team => team.team_name === \"Liverpool\" && team.league_name === \"Premier League\" && team.league_country === \"England\");\r",
									"    if (jsonData.some(team => team.team_name === \"Liverpool\" && team.league_name === \"Premier League\" && team.league_country === \"England\")) {\r",
									"         pm.expect(liverpool).to.not.be.undefined;\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/teams",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all teams filtered by country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Search filter is not case-sensitive\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) { // Only check if the array is not empty\r",
									"        const firstTeam = jsonData[0];\r",
									"        pm.expect(firstTeam.league_country).to.eql(\"England\");\r",
									"    } else {\r",
									"        console.warn(\"Warning: No teams returned for England, check seed data.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"All teams from country are returned\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(5);\r",
									"    if (jsonData.length > 0) { \r",
									"        jsonData.forEach(function(team) {\r",
									"            pm.expect(team.league_country).to.eql(\"England\");\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Teams from both Premier League and Championship are present for England\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    const validEnglishLeagues = [\"Premier League\", \"Championship\"];\r",
									"    jsonData.forEach(function(team) {\r",
									"        pm.expect(team.league_country).to.eql(\"England\");\r",
									"        pm.expect(validEnglishLeagues).to.include(team.league_name, `Team '${team.team_name}' has unexpected league '${team.league_name}' for England.`);\r",
									"    });\r",
									"\r",
									"    const hasPremierLeagueTeam = jsonData.some(team => team.league_name === \"Premier League\");\r",
									"    pm.expect(hasPremierLeagueTeam, \"Should have at least one team from Premier League\").to.be.true;\r",
									"\r",
									"    const hasChampionshipTeam = jsonData.some(team => team.league_name === \"Championship\");\r",
									"    pm.expect(hasChampionshipTeam, \"Should have at least one team from Championship\").to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/teams?country=england",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							],
							"query": [
								{
									"key": "country",
									"value": "england"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all teams filtered by country with extra params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Search filter is not case-sensitive\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) { // Only check if the array is not empty\r",
									"        const firstTeam = jsonData[0];\r",
									"        pm.expect(firstTeam.league_country).to.eql(\"Spain\");\r",
									"    } else {\r",
									"        console.warn(\"Warning: No teams returned for Spain, check seed data.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Unrecognised parameter has no effect\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2);\r",
									"    if (jsonData.length > 0) { \r",
									"        jsonData.forEach(function(team) {\r",
									"            pm.expect(team.league_country).to.eql(\"Spain\");\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/teams?country=spain&other=something",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							],
							"query": [
								{
									"key": "country",
									"value": "spain"
								},
								{
									"key": "other",
									"value": "something"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all teams filtered by country not in database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an empty array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').and.to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/teams?country=nowhere",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							],
							"query": [
								{
									"key": "country",
									"value": "nowhere"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all teams filtered by league not in database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an empty array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array').and.to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/teams?league_name=noLeague",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							],
							"query": [
								{
									"key": "league_name",
									"value": "noLeague"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all teams filtered by league name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Search filter is not case-sensitive\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) { // Only check if the array is not empty\r",
									"        const firstTeam = jsonData[0];\r",
									"        pm.expect(firstTeam.league_name).to.eql(\"Serie A\");\r",
									"    } else {\r",
									"        console.warn(\"Warning: No teams returned for Serie A, check seed data.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"All teams from league_name are returned\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(3); //find the two italian seed teams, and one brazilian one\r",
									"    if (jsonData.length > 0) { \r",
									"        jsonData.forEach(function(team) {\r",
									"            pm.expect(team.league_name).to.eql(\"Serie A\");\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Teams from both Italy and Brazil are present for Serie A\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    const validSerieACountries = [\"Italy\", \"Brazil\"];\r",
									"    jsonData.forEach(function(team) {\r",
									"        pm.expect(team.league_name).to.eql(\"Serie A\");\r",
									"        pm.expect(validSerieACountries).to.include(team.league_country, `Team '${team.team_name}' has unexpected country '${team.league_country}' for Serie A.`);\r",
									"    });\r",
									"\r",
									"    const hasItalianTeam = jsonData.some(team => team.league_country === \"Italy\");\r",
									"    pm.expect(hasItalianTeam, \"Should have at least one team from Italy\").to.be.true;\r",
									"\r",
									"    const hasBrazilianTeam = jsonData.some(team => team.league_country === \"Brazil\");\r",
									"    pm.expect(hasBrazilianTeam, \"Should have at least one team from Brazil\").to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/teams?league_name=serie+a",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							],
							"query": [
								{
									"key": "league_name",
									"value": "serie+a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all teams filtered by league name and country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Search filter is not case-sensitive\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    if (jsonData.length > 0) { // Only check if the array is not empty\r",
									"        const firstTeam = jsonData[0];\r",
									"        pm.expect(firstTeam.league_country).to.eql(\"Italy\");\r",
									"    } else {\r",
									"        console.warn(\"Warning: No teams returned for Italy, check seed data.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"All teams from country are returned\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2); //only find the two italian seed teams\r",
									"    if (jsonData.length > 0) { \r",
									"        jsonData.forEach(function(team) {\r",
									"            pm.expect(team.league_country).to.eql(\"Italy\");\r",
									"            pm.expect(team.league_name).to.eql(\"Serie A\");\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/teams?league_name=serie+a&country=italy",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							],
							"query": [
								{
									"key": "league_name",
									"value": "serie+a"
								},
								{
									"key": "country",
									"value": "italy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains the created team with correct data\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.name).to.eql(\"Flamengo\"); \r",
									"    pm.expect(jsonData.league_id).to.eql(8);\r",
									"    pm.expect(jsonData).to.have.property('created_at');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Flamengo\",\r\n    \"league_country\": \"brazil\",\r\n     \"league_name\": \"serie a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/teams",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a team that already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Conflict\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Duplicate teams are not case sensitive\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('Team with name \"arsenal\" already exists in this league.');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"arsenal\",\r\n    \"league_country\": \"england\",\r\n    \"league_name\": \"premier league\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/teams",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a team in an ambiguous league",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates league_country is needed\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('Multiple leagues exist with name \"serie A\". Please provide league_country to specify.');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"arsenal\",\r\n    \"league_name\": \"serie A\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/teams",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new team without country in unambiguous league",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains the created team with correct data if league name is not ambigous\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.name).to.eql(\"Getafe\"); \r",
									"    pm.expect(jsonData.league_id).to.eql(2);\r",
									"    pm.expect(jsonData).to.have.property('created_at');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Getafe\",\r\n     \"league_name\": \"la liga\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/teams",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new team in nonexistant league",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates league not found\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('No league found with name: \"no league\"');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Flamengo\",\r\n    \"league_country\": \"brazil\",\r\n     \"league_name\": \"no league\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/teams",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new team in league with wrong country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates league not found in the given country\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('League \"premier league\" exists, but not in country \"brazil\". It is in \"England\".');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Flamengo\",\r\n    \"league_country\": \"brazil\",\r\n    \"league_name\": \"premier league\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/teams",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new team in league with wrong country (multiple)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates league not found in the given country\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql('League \"serie a\" found, but not in country \"spain\". Available in: Italy, Brazil.');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Flamengo\",\r\n    \"league_country\": \"spain\",\r\n    \"league_name\": \"serie a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/teams",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new team without name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates name is required\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Team name is required\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"league_country\": \"brazil\",\r\n    \"league_name\": \"serie a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/teams",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new team without league name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message indicates league_name is required\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"League name is required to associate the team.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Flamengo\",\r\n    \"league_country\": \"brazil\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/teams",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"teams"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API welcome",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains the correct welcome message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.eql(\"Welcome to the API to track football leagues and teams!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "API documentation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is text/html\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    // Check that the Content-Type header includes 'text/html'\r",
							"    // It might also include charset, e.g., 'text/html; charset=utf-8'\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api-docs",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api-docs"
					]
				}
			},
			"response": []
		}
	]
}